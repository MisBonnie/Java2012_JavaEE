回顾:
  JSP Java 服务器页面, 本质就是一个Servlet
  xx.jsp -> xx_jsp.java -> xx_jsp.class
  xx_jsp.java - class xx_jsp extends HttpServlet (service)

  <% java代码 %>: service方法中, 正常的java代码
  <%=表达式 %>: service方法中, out.print(表达式)
  <%! java代码 %>: 类中, 类的成员
  html元素: service方法中, out.write("html元素")

  response.setContentType("text/html;charset=utf-8")

  <%@ page contentType="text/html;charset=utf-8" session isELIgnore isErrorPage import buffer errorPage ..%>
  <%@ include page="包含的页面"%>
  <%@ taglib uri prefix %>

  JSP内置对象 9个
  request  response  application  session  pageContext  out  page  config  exception

  pageContext 可以获得其他8个内置对象, 还可以操作其他三个域对象
     findAttribute()

  JSP动态指令 <jsp:include file="">
             <jsp:forward file="">

  EL表达式 ${表达式 }
          最常用的功能: 获得域中的值
          11个内置对象: 了解 param

  JSTL标签
    <c:if test="判断">
    <c:foreach begin="" end="" var="" step="1">
    <c:foreach items="数组/集合" var="元素" varStatus="状态">


-------------------------------------------------------------------------------------
会话技术: 会话[客户端连接上服务器 到 客户端关闭 -> 一次会话]
注意: 一次会话中, 可以产生多次请求
     cookie和session的功能都是存储数据

Cookie: 存储在客户端,
        好处: 减少了服务器存储压力, 坏处: 客户端数据不安全
        只能存储String类型数据
        使用场景: 电商网站未登录时购物车存储, 自动登录时账号密码存储

        保存: 服务器将数据传递给客户端来保存, 服务器主动提供的
              response.addCookie(cookie) -> set-cookie响应头
        携带: 客户端只有有cookie, 并且符合条件, 客户端会自动的将cookie数据携带给服务器(不在乎服务器使不使用)
              request请求携带 -> cookie请求头
        条件: 携带路径 - 访问服务器哪些资源时, cookie会自动携带到服务器
             默认携带路径: (设置cookie的资源)当前目录
             设置path: / -> 当前服务器所有资源     /应用名 -> 当前应用所有资源
             设置携带路径: setPath(path)

        cookie默认生命周期: 一次会话, 会话结束, cookie就自动删除
        设置持久化时间: setMaxAge(秒)

        相同的cookie: cookie的name相同, 并且path相同

Session: 存储在服务器端
        好处: 数据安全, 坏处: 增加了服务器的存储压力
        可以存储Object类型数据
        使用场景: 存储用户登录状态

        request.getSession();
          第一次调用该方法, 服务器创建一个session空间, 并且生成JSESSIONID, 将id值发送给客户端保存到cookie中
          同一个客户端再次访问服务器, 会携带JSESSIONID所在的cookie
          再次调用该方法, 服务器会自动获取cookie中的JSESSIONID值, 并且根据id值返回对应的session对象

        会话结束, session不会销毁, cookie删除了(JSESSIONID)
        JSESSIONID持久化, 需要创建一个一模一样的Cookie, setMaxAge
            Cookie cookie = new Cookie("JSESSIONID", session.getId());
            cookie.setPath(request.getContextPath());
            cookie.setMaxAge(100 * 60);

            response.addCookie(cookie);
       session的生命周期:
         创建: 第一次调用request.getSession()
         销毁: 1.服务器(非正常)关闭, 正常关闭, session数据保存(IDEA不能测试)
              2.手动销毁  invalidate();
              3.超时自动销毁, 默认30分钟(tomcat/conf/web.xml),
                设置session超时时间 web.xml
                    <session-config>
                        <session-timeout>1</session-timeout>
                    </session-config>
                超时: 从客户端对服务器没有任何请求开始计算

服务器端存储数据: 4个域对象
    pageContext: 当前页面
    request: 一次请求
    session: 默认一次会话, (通过JSESSIONID持久化来延长域的时间)
    application: 应用运行期间


23种设计模式: 小功能模块中的套路

开发模式: 开发过程中搭建项目的套路
    web: web层 - servlet filter listener
    service: service层, 业务, 面向接口
    dao: dao层 - jdbc处理
    beans: domain/pojo/entity  实体类
    utils: 工具类
    test: 测试类

jar: 数据库驱动包: mysql - connector
     连接池: druid
     JdbcTemplate:  commons-logging spring-beans spring-core spring-jdbc spring-tx
     jstl: standard jstl




